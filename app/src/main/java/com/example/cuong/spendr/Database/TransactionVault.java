package com.example.cuong.spendr.Database;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.support.v4.net.ConnectivityManagerCompat;
import android.widget.Toast;

import com.example.cuong.spendr.Models.Budget;
import com.example.cuong.spendr.Models.Transaction;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

/**
 * Author: Cuong Chung
 * Class: CSCI 39585 Android Application Development
 * Professor: Anna Wisniewska
 *
 * This is class defines a custom interface to a mDatabase. In particular, we are using Google's
 * Firebase Realtime Database.
 *
 * This class is a singleton.
 *
 * The Database interface should have the following methods:
 * Connect
 * Add
 * Update
 * Delete
 * Retrieve
 *
 */

public class TransactionVault {
    // Paths for Firebase.
    private static final String USERS_ROOT = "users/";
    public static final String TRANSACTIONS = "transactions";
    public static final String BUDGET = "budget";

    // Singleton
    private static TransactionVault mDatabase;

    private Context mContext;

    // Firebase components.
    private FirebaseDatabase mFirebaseDatabase;
    private DatabaseReference mTransactionsDatabaseReference;
    private String mUserID;

    // String is the key that is auto-generated by Firebase for each Transaction object.
    // The String key is necessary for identifying individual transactions for updates and deletion.
    private Map<String,Transaction> mTransactionMap;
    private Budget mBudget;
    private boolean mIsSetBudget;

    // Classes that implement BudgetDataListener will be notified of changes made to the budget
    // child in Firebase.
    private List<BudgetDataListener> mBudgetDataListener;

    // Returns the only instance of this class.
    // An instance is created if it has not yet been instantiated.
    public static TransactionVault getInstance() {
        if (mDatabase == null) {
            mDatabase = new TransactionVault();
        }

        return mDatabase;
    }

    private TransactionVault() {
        mTransactionMap = new HashMap<>();
        mBudgetDataListener = new ArrayList<>();
        mFirebaseDatabase = FirebaseDatabase.getInstance();
        mFirebaseDatabase.setPersistenceEnabled(true);
    }

    // Connects to Firebase and creates a reference to userID/{budget or transaction}
    // Database listeners will be set up.
    public void connect(String userID) {
        mUserID = userID;
        setUpDatabaseListeners();
    }

    // Adds the data to the location reference in Firebase.
    public void add(String location, Object data) {
        if (location.equals(TRANSACTIONS)) {
            connectToTransactions();
            mTransactionsDatabaseReference.push().setValue(data);
        } else {
            connectToBudget();
            mTransactionsDatabaseReference.setValue(data);
        }
    }

    // Updates the data to the location reference in Firebase.
    public void update(String location, Object data) {
        if (location.equals(TRANSACTIONS)) {
            connectToTransactions();
            Transaction transaction = (Transaction) data;
            String id = "";
            for (Map.Entry<String, Transaction> pair : mTransactionMap.entrySet()) {
                if (pair.getValue().equals(transaction)) {
                    id = pair.getKey();
                }
            }

            mTransactionsDatabaseReference.child(id).setValue(data);
        }
    }

    // Deletes the data at the location reference in Firebase.
    public void delete(String location, Object data) {
        Transaction transaction = (Transaction) data;
        String id = "";
        if (location.equals(TRANSACTIONS)) {
            for (Map.Entry<String, Transaction> pair : mTransactionMap.entrySet()) {
                if (pair.getValue().equals(transaction)) {
                    id = pair.getKey();
                }
            }

            mTransactionsDatabaseReference.child(id).removeValue();
        }
    }

    public TransactionVault setContext(Context context) {
        mContext = context;
        return mDatabase;
    }

    public Map<String, Transaction> getTransactions() {
        return mTransactionMap;
    }

    // Returns a list of transactions sorted by date then amount.
    public List<Transaction> getSortedTransactionsList() {
        List<Transaction> transactions = new ArrayList<>(mTransactionMap.values());
        Collections.sort(transactions, new Comparator<Transaction>() {
            @Override
            public int compare(Transaction o1, Transaction o2) {
                Date date1 = new Date();
                Date date2 = new Date();
                try {
                    date1 = (new SimpleDateFormat("MM/dd/yyyy", Locale.US)).parse(o1.getDate());
                    date2 = (new SimpleDateFormat("MM/dd/yyyy", Locale.US)).parse(o2.getDate());
                } catch (ParseException e) {
                    e.printStackTrace();
                }

                // Sort date from present to past.
                // If dates are the same, highest amount to lowest.
                if (date1.compareTo(date2) == 0) {
                    return Double.compare(o2.getAmount(), o1.getAmount());
                } else {
                    return date2.compareTo(date1);
                }
            }
        });

        return transactions;
    }

    public boolean isSetBudget() {
        return mIsSetBudget;
    }

    public Budget getBudget() {
        return mIsSetBudget ? mBudget : null;
    }

    public void addBudgetDataListener(BudgetDataListener listener) {
        mBudgetDataListener.add(listener);
    }

    // Defines the interface classes should implement if they want to be notified of changes to
    // the budget reference in Firebase.
    public interface BudgetDataListener {
        void onDataChanged();
    }

    private void notifyListeners() {
        for (BudgetDataListener listener : mBudgetDataListener) {
            listener.onDataChanged();
        }
    }

    // Gets a reference to the budget child in Firebase.
    private void connectToBudget() {
        mTransactionsDatabaseReference = mFirebaseDatabase.getReference(USERS_ROOT + mUserID).child(BUDGET);
    }

    // Gets a reference to the transaction child in Firebase.
    private void connectToTransactions() {
        mTransactionsDatabaseReference = mFirebaseDatabase.getReference(USERS_ROOT + mUserID + "/" + TRANSACTIONS);
    }

    // Listeners are added for budget and transaction value changes and transaction deletion.
    private void setUpDatabaseListeners() {
        // Set up listener for database path "/users/${userid}/budget"
        connectToBudget();
        mTransactionsDatabaseReference.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                mBudget = dataSnapshot.getValue(Budget.class);
                if (mBudget != null) {
                    mIsSetBudget = true;
                } else {
                    mIsSetBudget = false;
                }

                notifyListeners();
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {
            }
        });

        // Set up listener for database path "/users/${userid}/transactions"
        connectToTransactions();
        mTransactionsDatabaseReference.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                for (DataSnapshot child : dataSnapshot.getChildren()) {
                    Transaction transaction = child.getValue(Transaction.class);
                    String key = child.getKey();
                    if (!mTransactionMap.containsKey(key)) {
                        mTransactionMap.put(key, transaction);
                    }
                }

                notifyListeners();
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {
            }
        });

        mTransactionsDatabaseReference.addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(DataSnapshot dataSnapshot, String s) {
                notifyListeners();
            }

            @Override
            public void onChildChanged(DataSnapshot dataSnapshot, String s) {

            }

            @Override
            public void onChildRemoved(DataSnapshot dataSnapshot) {
                mTransactionMap.remove(dataSnapshot.getKey());
                notifyListeners();
            }

            @Override
            public void onChildMoved(DataSnapshot dataSnapshot, String s) {

            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });
    }
}